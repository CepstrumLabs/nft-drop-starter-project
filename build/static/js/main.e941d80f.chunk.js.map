{"version":3,"sources":["CandyMachine/index.js","CandyMachine/connection.js","CountdownTimer/index.js","assets/twitter-logo.svg","App.js","index.js","CandyMachine/helpers.js"],"names":["SystemProgram","web3","opts","CandyMachine","walletAddress","useState","candyMachine","setCandyMachine","isMinting","setIsMinting","getCandyMachineCreator","a","candyMachineID","PublicKey","findProgramAddress","Buffer","from","toBuffer","candyMachineProgram","useEffect","getCandyMachineState","provider","getProvider","Program","fetchIdl","idl","program","account","fetch","process","console","log","data","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","presale","whitelistMintSettings","Date","getTime","goLiveDateTimeString","toGMTString","id","state","isSoldOut","isActive","endSettings","endSettingType","date","number","isPresale","treasury","wallet","tokenMint","gatekeeper","hiddenSettings","price","connection","Connection","Provider","window","solana","getMetadata","mint","TOKEN_METADATA_PROGRAM_ID","res","getMasterEdition","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","mintTokenWrapper","mintToken","response","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","txid","className","currentDate","dropDate","renderDropTimer","onClick","disabled","instructionSet","signersSet","sequenceType","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","Promise","all","getUnixTs","DEFAULT_TIMEOUT","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","message","result","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","CountdownTimer","timerString","setTimerString","interval","setInterval","distance","days","Math","floor","hours","minutes","seconds","clearInterval","TWITTER_HANDLE","TWITTER_LINK","App","setWalletAddress","checkIfWalletIsConnected","isPhantom","connect","onlyIfTrusted","alert","connectWallet","onLoad","addEventListener","removeEventListener","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById","anchor","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","buyer"],"mappings":"0OAiBQA,EAAkBC,IAAlBD,cACFE,EACiB,YA6ZRC,IA1ZM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEtB,EAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAGMC,EAAsB,uCAAG,WAAOJ,GAAP,eAAAK,EAAA,6DACvBC,EAAiB,IAAIC,YAAUP,GADR,SAEhBL,IAAKY,UAAUC,mBACxB,CAACC,EAAOC,KAAK,iBAAkBJ,EAAeK,YAC9CC,KAJyB,mFAAH,sDAQ5BC,qBAAU,WACRC,MACC,IAMH,IAAMA,EAAoB,uCAAG,8CAAAT,EAAA,6DACrBU,EAAWC,IADU,SAGTC,IAAQC,SAASN,IAAqBG,GAH7B,cAGrBI,EAHqB,OAKrBC,EAAU,IAAIH,IAAQE,EAAKP,IAAqBG,GAL3B,SAOAK,EAAQC,QAAQrB,aAAasB,MACtDC,gDARyB,OAOrBvB,EAPqB,OAW3BwB,QAAQC,IAAI,qDACZD,QAAQC,IAAIzB,EAAa0B,MAGnBC,EAAiB3B,EAAa0B,KAAKC,eAAeC,WAClDC,EAAgB7B,EAAa6B,cAAcD,WAC3CE,EAAiBH,EAAiBE,EAClCE,EAAa/B,EAAa0B,KAAKM,WAAWJ,WAE1CK,EACNjC,EAAa0B,KAAKQ,uBAClBlC,EAAa0B,KAAKQ,sBAAsBD,WACtCjC,EAAa0B,KAAKM,YAClBhC,EAAa0B,KAAKM,WAAWJ,YAAa,IAAIO,MAAOC,UAAY,KAG7DC,EA3BqB,UA2BK,IAAIF,KAAkB,IAAbJ,GAAmBO,eAE5DrC,EAAgB,CACdsC,GAAIhB,+CACJH,UACAoB,MAAO,CACLb,iBACAE,gBACAC,iBACAC,aACAM,uBACAI,UAA8B,IAAnBX,EACXY,UACGT,GACCjC,EAAa0B,KAAKM,WAAWJ,YAAa,IAAIO,MAAOC,UAAY,QAClEpC,EAAa2C,cACV3C,EAAa2C,YAAYC,eAAeC,KACtC7C,EAAa2C,YAAYG,OAAOlB,YAAa,IAAIO,MAAOC,UAAY,IACpEP,EAAgB7B,EAAa2C,YAAYG,OAAOlB,aAExDmB,UAAWd,EACXD,WAAYhC,EAAa0B,KAAKM,WAC9BgB,SAAUhD,EAAaiD,OACvBC,UAAWlD,EAAakD,UACxBC,WAAYnD,EAAa0B,KAAKyB,WAC9BR,YAAa3C,EAAa0B,KAAKiB,YAC/BT,sBAAuBlC,EAAa0B,KAAKQ,sBACzCkB,eAAgBpD,EAAa0B,KAAK0B,eAClCC,MAAOrD,EAAa0B,KAAK2B,SAI7B7B,QAAQC,IAAI,CACVE,iBACAE,gBACAC,iBACAC,aACAM,uBACAJ,YAjEyB,4CAAH,qDAsEpBjB,EAAc,WAClB,IAEMsC,EAAa,IAAIC,aAFPhC,0CAKhB,OADiB,IAAIiC,IAASF,EAAYG,OAAOC,OAAQ9D,IAIrD+D,EAAW,uCAAG,WAAOC,GAAP,eAAAvD,EAAA,sEACEE,YAAUC,mBAC1B,CACEC,EAAOC,KAAK,YACZmD,IAA0BlD,WAC1BiD,EAAKjD,YAEPkD,KAPc,cACVC,EADU,OAShBtC,QAAQC,IAAIqC,GATI,kBAUTA,EAAI,IAVK,2CAAH,sDAaXC,EAAgB,uCAAG,WAAOH,GAAP,SAAAvD,EAAA,sEAEfE,YAAUC,mBACd,CACEC,EAAOC,KAAK,YACZmD,IAA0BlD,WAC1BiD,EAAKjD,WACLF,EAAOC,KAAK,YAEdmD,KATmB,uCAWrB,IAXqB,2CAAH,sDAchBG,EAA0C,SAC9CC,EACAC,EACApE,EACAqE,GAEA,IAAMC,EAAO,CACX,CAAEC,OAAQH,EAAOI,UAAU,EAAMC,YAAY,GAC7C,CAAEF,OAAQJ,EAAwBK,UAAU,EAAOC,YAAY,GAC/D,CAAEF,OAAQvE,EAAewE,UAAU,EAAOC,YAAY,GACtD,CAAEF,OAAQF,EAAqBG,UAAU,EAAOC,YAAY,GAC5D,CACEF,OAAQ1E,IAAKD,cAAc8E,UAC3BF,UAAU,EACVC,YAAY,GAEd,CAAEF,OAAQI,IAAkBH,UAAU,EAAOC,YAAY,GACzD,CACEF,OAAQ1E,IAAK+E,mBACbJ,UAAU,EACVC,YAAY,IAGhB,OAAO,IAAI5E,IAAKgF,uBAAuB,CACrCP,OACAI,UAAWI,IACXlD,KAAMjB,EAAOC,KAAK,OAIhBmE,EAAgB,uCAAG,4BAAAxE,EAAA,sEAErBF,GAAa,GAFQ,SAGE2E,IAHF,cAGfC,EAHe,OAIrB5E,GAAa,GAJQ,kBAKd4E,GALc,gCAOrBvD,QAAQC,IAAI,yCACZD,QAAQC,IAAR,MACAtB,GAAa,GATQ,iCAWhB,IAXgB,yDAAH,qDA2BhB2E,EAAS,uCAAG,8DAAAzE,EAAA,6DACVuD,EAAOjE,IAAKqF,QAAQC,WADV,SAIRC,YAActB,EAAKuB,UAAWrF,EAAcqF,WAJpC,UAGVC,EAHU,OAKd,IAE+BpF,EAAawC,MAAMU,UAPpC,iCAQLgC,YAAclF,EAAawC,MAAMU,UAAWpD,EAAcqF,WARrD,mBAQiE,GARjE,6BASZrF,EAAcqF,UATF,eAOVE,EAPU,KAWVC,EAAsBtF,EAAauC,GACnCgD,EAAoB,GACpBC,EAAU,CAAC5B,GACX6B,EAAsB,GAdZ,KAgBd9F,IAAKD,cAhBS,KAiBAI,EAAcqF,UAjBd,KAkBMvB,EAAKuB,UAlBX,KAmBLO,IAAWC,KAnBN,UAqBJ3F,EAAaoB,QAAQL,SAASuC,WAAWsC,kCAC7CF,IAAWC,MAtBH,4BAwBDlB,IAxBC,MAiBZoB,WAjBY,KAkBZC,iBAlBY,KAmBZC,MAnBY,KAoBZC,SApBY,KAwBZxB,UAxBY,gBAgBKyB,cAhBL,qBA0BdC,IAAMC,0BACJ1B,IACAb,EAAKuB,UACL,EACArF,EAAcqF,UACdrF,EAAcqF,WA/BF,MAiCdnB,EACEoB,EACAtF,EAAcqF,UACdrF,EAAcqF,UACdvB,EAAKuB,WArCO,MAuCde,IAAME,wBACJ3B,IACAb,EAAKuB,UACLC,EACAtF,EAAcqF,UACd,GACA,GA9BEkB,EAfU,yBAiDZrG,EAAawC,MAAMW,WAjDP,8BAkDdoC,EAlDc,UAoDJe,YACJxG,EAAcqF,UACdnF,EAAawC,MAAMW,WAAWoD,mBAtDtB,wBAwDV,GAxDU,OAmDZlC,OAnDY,MAyDZE,YAAY,EACZD,UAAU,GA1DE,MAkDIkC,KAlDJ,mBA4DVxG,EAAawC,MAAMW,WAAWsD,YA5DpB,wBA6DZlB,EAAkBiB,KAAK,CACrBnC,OAAQqC,IACRnC,YAAY,EACZD,UAAU,IAhEA,MAkEZiB,EAlEY,UAoEFoB,YACJ3G,EAAawC,MAAMW,WAAWoD,mBArExB,qBAuER,GAvEQ,OAmEVlC,OAnEU,MAwEVE,YAAY,EACZD,UAAU,GAzEA,MAkEMkC,KAlEN,8BA6EZxG,EAAawC,MAAMN,sBA7EP,wBA8ER0B,EAAO,IAAIjE,IAAKY,UACpBP,EAAawC,MAAMN,sBAAsB0B,MA/E7B,UAkFgBsB,YAActB,EAAM9D,EAAcqF,WAlFlD,WAkFRyB,EAlFQ,OAkF8D,GAC5ErB,EAAkBiB,KAAK,CACrBnC,OAAQuC,EACRrC,YAAY,EACZD,UAAU,KAGRtE,EAAawC,MAAMN,sBAAsB2E,KAAKC,cAzFpC,wBA0FNC,EAAyBpH,IAAKqF,QAAQC,WAE5CM,EAAkBiB,KAAK,CACrBnC,OAAQT,EACRW,YAAY,EACZD,UAAU,IAEZiB,EAAkBiB,KAAK,CACrBnC,OAAQ0C,EAAuB5B,UAC/BZ,YAAY,EACZD,UAAU,IAEZkB,EAAQgB,KAAKO,GAtGD,UAwGJ/G,EAAaoB,QAAQL,SAASuC,WAAW0D,eAC7CJ,GAzGQ,iBA4GVP,EAAaG,KACXN,IAAMe,yBACJxC,IACAmC,EACAG,EAAuB5B,UACvBrF,EAAcqF,UACd,GACA,IAGJM,EAAoBe,KAClBN,IAAMgB,wBACJzC,IACAmC,EACA9G,EAAcqF,UACd,MA3HM,eAkIZnF,EAAawC,MAAMU,YACfiE,EAAoBxH,IAAKqF,QAAQC,WAEvCO,EAAQgB,KAAKW,GACb5B,EAAkBiB,KAAK,CACrBnC,OAAQgB,EACRd,YAAY,EACZD,UAAU,IAEZiB,EAAkBiB,KAAK,CACrBnC,OAAQ8C,EAAkBhC,UAC1BZ,YAAY,EACZD,UAAU,IAGZ+B,EAAaG,KACXN,IAAMe,yBACJxC,IACAY,EACA8B,EAAkBhC,UAClBrF,EAAcqF,UACd,GACAnF,EAAawC,MAAMa,MAAMzB,aAG7B6D,EAAoBe,KAClBN,IAAMgB,wBACJzC,IACAY,EACAvF,EAAcqF,UACd,MAhKU,UAoKcxB,EAAYC,EAAKuB,WApK/B,eAoKViC,EApKU,OAqKhB5F,QAAQC,IAAI,oBAAsB2F,GArKlB,UAsKYrD,EAAiBH,EAAKuB,WAtKlC,eAsKVkC,EAtKU,iBAwKiCjH,EAC/CkF,GAzKc,2CAwKTgC,EAxKS,KAwKYC,EAxKZ,WA4KhBlB,EA5KgB,UA6KRrG,EAAaoB,QAAQoG,YAAYC,QAAQF,EAAa,CAC1DG,SAAU,CACR1H,aAAcsF,EACdgC,sBACApD,MAAOpE,EAAcqF,UACrBlC,OAAQjD,EAAawC,MAAMQ,SAC3BY,KAAMA,EAAKuB,UACXwC,SAAUP,EACVC,gBACAO,cAAe9H,EAAcqF,UAC7B0C,gBAAiB/H,EAAcqF,UAC/B2C,qBAAsBjE,IACtBkE,aAActD,IACduD,cAAetI,EAAc8E,UAC7ByD,KAAMtI,IAAK+E,mBACXwD,MAAOvI,IAAKwI,oBACZC,kBAAmBzI,IAAK0I,iCACxBC,yBAA0B3I,IAAK4I,4BAEjChD,kBACEA,EAAkBiD,OAAS,EAAIjD,OAAoBkD,IAjMzC,kCA4KHjC,KA5KG,sCAuMNkC,YACJ1I,EAAaoB,QAAQL,SAASuC,WAC9BtD,EAAaoB,QAAQL,SAASkC,OAC9B,CAACoD,EAAcZ,GACf,CAACD,EAAS,KA3MA,wCA6MZmD,IAAIC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SA7MH,oCA+MdtH,QAAQC,IAAR,OA/Mc,iCAiNT,IAjNS,2DAAH,qDAoNf,OACEzB,GACA,sBAAK+I,UAAU,oBAAf,UAnOsB,WACtB,IAAMC,EAAc,IAAI7G,KAClB8G,EAAW,IAAI9G,KAAqC,IAAhCnC,EAAawC,MAAMT,YAI7C,OAHAP,QAAQC,IAAI,gBAAkBuH,GAC9BxH,QAAQC,IAAI,aAAewH,GAC3BzH,QAAQC,IAAKwH,EAAWD,GACpBA,EAAcC,GACdzH,QAAQC,IAAI,qBACL,cAAC,IAAD,CAAgBwH,SAAUA,KAE9B,iDAAkBjJ,EAAawC,MAAMH,wBA0NzC6G,GACD,uEAAmClJ,EAAawC,MAAMX,cAAtD,cAAyE7B,EAAawC,MAAMb,mBAC3F3B,EAAawC,MAAMX,gBAAkB7B,EAAawC,MAAMb,eAAkB,mBAAGoH,UAAU,WAAb,mCAA2C,yBAAQA,UAAU,yBAAyBI,QAAStE,EAAkBuE,SAAUlJ,EAAhF,WAClHA,GAAa,oBACdA,GAAa,mC,6ICpUf,IAAMwI,EAAgB,uCAAG,WAC9BpF,EACAL,EACAoG,EACAC,GAJ8B,qDAAAjJ,EAAA,yDAK9BkJ,EAL8B,+BAKf,WACfC,EAN8B,+BAMjB,eACbC,EAP8B,+BAOZ,SAACX,EAAMY,KACzBC,EAR8B,+BAQf,SAACb,EAAMY,GAAP,OAAe,GAC9BE,EAT8B,uBAWzB3G,EAAOkC,UAXkB,sBAWD,IAAI0E,IAXH,UAaxBC,EAAe,GAEhBF,EAfyB,kCAgBdtG,EAAWyG,mBAAmBP,GAhBhB,QAgB5BI,EAhB4B,0BAmBrBI,GACP,IAAM3D,EAAegD,EAAeW,GAC9BxE,EAAU8D,EAAWU,GAE3B,GAA4B,IAAxB3D,EAAamC,OACf,iBAGF,IAAIyB,EAAc,IAAIC,cACtB7D,EAAa8D,SAAQ,SAAA3C,GAAW,OAAIyC,EAAYG,IAAI5C,MACpDyC,EAAYI,gBAAkBT,EAAMU,UACpCL,EAAYM,WAAZ,MAAAN,EAAW,CAEThH,EAAOkC,WAFE,mBAGNK,EAAQoD,KAAI,SAAA4B,GAAC,OAAIA,EAAErF,gBAGpBK,EAAQgD,OAAS,GACnByB,EAAYQ,YAAZ,MAAAR,EAAW,YAAgBzE,IAG7BsE,EAAatD,KAAKyD,IArBXD,EAAI,EAnBiB,aAmBdA,EAAIX,EAAeb,QAnBL,mCAmBrBwB,GAnBqB,wDAmBaA,IAnBb,yCA2CL/G,EAAOyH,oBAAoBZ,GA3CtB,QA2CxBa,EA3CwB,OA6CxBC,EAAa,GAEfC,EAAmB,CAAEC,YAAY,EAAOd,EAAG,GAC/CxI,QAAQC,IACN,qBACAkJ,EAAWnC,OACX,sBACAa,EAAeb,QApDa,IAAAnI,EAAA,iBAsDrB2J,GAtDqB,eAAA3J,EAAA,0DAuDtB0K,EAAmBC,EAAsB,CAC7C1H,aACA2H,kBAAmBN,EAAWX,MAI7BkB,MAAK,YAAqB,IAAlBpC,EAAiB,EAAjBA,KAAiB,EAAXqC,KACb1B,EAAgBX,EAAMkB,MAEvBoB,OAAM,SAAAC,GACL1B,EAAagB,EAAWX,GAAIA,GACP,kBAAjBT,IACFsB,EAAiBC,YAAa,EAC9BD,EAAiBb,EAAIA,MAIN,aAAjBT,EAxEwB,0CA0ElBwB,EA1EkB,0DA4ExBvJ,QAAQC,IAAI,iBAAZ,OACIoJ,EAAiBC,WA7EG,wBA8EtBtJ,QAAQC,IAAI,WAAYoJ,EAAiBb,GA9EnB,KAiFZa,EAAiBb,EAjFL,UAkFTsB,QAAQC,IAAIX,GAlFH,iCAiFpB9H,OAjFoB,KAkFpB6F,IAlFoB,kEAuF1BiC,EAAYpE,KAAKuE,GAvFS,wDAsDrBf,EAAI,EAtDiB,aAsDdA,EAAIW,EAAWnC,QAtDD,0CAsDrBwB,GAtDqB,qGAsDSA,IAtDT,2BA2FT,aAAjBT,EA3F0B,kCA4FtB+B,QAAQC,IAAIX,GA5FU,oBA+FbD,EAAWnC,OA/FE,UA+FiB8C,QAAQC,IAAIX,GA/F7B,8CA+FrB9H,OA/FqB,KA+FM6F,IA/FN,mDAAH,4DAoNhB6C,EAAY,WACvB,OAAO,IAAIrJ,MAAOC,UAAY,KAG1BqJ,EAAkB,KAEjB,SAAeT,EAAtB,kC,4CAAO,qDAAA3K,EAAA,6DACL4K,EADK,EACLA,kBACA3H,EAFK,EAELA,WAFK,IAGLoI,eAHK,MAGKD,EAHL,EAKCE,EAAiBV,EAAkBW,YACnCC,EAAYL,IACdL,EAAO,EAPN,SAQc7H,EAAWwI,mBAC5BH,EACA,CACEI,eAAe,IAXd,cAQCjD,EARD,OAeLtH,QAAQC,IAAI,oCAAqCqH,GAE7CkD,GAAO,EACX,sBAAC,sBAAA3L,EAAA,yDACS2L,KAAQR,IAAcK,EAAYH,GAD3C,uBAEGpI,EAAWwI,mBAAmBH,EAAgB,CAC5CI,eAAe,IAHpB,SAKSE,EAAM,KALf,gEAAD,GAlBK,oBA2BwBC,EACzBpD,EACA4C,EACApI,EACA,UACA,GAhCC,WA2BG6I,EA3BH,8BAoCK,IAAIC,MAAM,kDApCf,YAsCCD,EAAaE,IAtCd,uBAuCD7K,QAAQ8K,MAAMH,EAAaE,KACrB,IAAID,MAAM,gDAxCf,QA2CHjB,GAAmB,OAAZgB,QAAY,IAAZA,OAAA,EAAAA,EAAchB,OAAQ,EA3C1B,sDA6CH3J,QAAQ8K,MAAM,uBAAd,OACI,KAAIZ,QA9CL,uBA+CK,IAAIU,MAAM,kDA/Cf,eAiDCG,EAAiB,KAjDlB,oBAoDOC,EAAoBlJ,EAAY2H,EAAmB,UApD1D,QAmDDsB,EAnDC,OAqDCE,MArDD,+DAuDCF,IAAkBA,EAAeF,IAvDlC,qBAwDGE,EAAeG,KAxDlB,iBAyDU1C,EAAIuC,EAAeG,KAAKlE,OAAS,EAzD3C,aAyD8CwB,GAAK,GAzDnD,sBA0DS2C,EAAOJ,EAAeG,KAAK1C,IACxB4C,WAAW,iBA3DvB,uBA4DW,IAAIR,MACR,uBAAyBO,EAAKE,MAAM,gBAAgBrE,SA7D3D,UAyDwDwB,EAzDxD,8BAkEK,IAAIoC,MAAMU,KAAKC,UAAUR,EAAeF,MAlE7C,yBAsEHL,GAAO,EAtEJ,4BAyELxK,QAAQC,IAAI,UAAWqH,EAAM0C,IAAcK,GAzEtC,kBA0EE,CAAE/C,OAAMqC,SA1EV,0E,+BA6EQqB,E,kFAAf,WACElJ,EACA2G,EACAT,GAHF,uBAAAnJ,EAAA,sEAMsCiD,EAAW0J,iBAE7C1J,EAAW2J,0BARf,cAMEhD,EAAYI,gBANd,OAWQ6C,EAAWjD,EAAYkD,mBAEvBC,EAAkBnD,EAAYoD,WAAWH,GACzCI,EAAqBF,EAAgBG,SAAS,UAE9CC,EAAO,CAACF,EADC,CAAEG,SAAU,SAAUjE,eAfvC,UAmBoBlG,EAAWoK,YAAY,sBAAuBF,GAnBlE,aAmBQ1J,EAnBR,QAoBUwI,MApBV,uBAqBU,IAAIF,MAAM,mCAAqCtI,EAAIwI,MAAMqB,SArBnE,iCAuBS7J,EAAI8J,QAvBb,6C,+BA0Be1B,E,kFAAf,WACEpD,EACA4C,EACApI,GAHF,mCAAAjD,EAAA,6DAIEmJ,EAJF,+BAIe,SACbqE,EALF,gCAOM7B,GAAO,EACP8B,EAAS,CACX3C,KAAM,EACN4C,cAAe,EACf1B,IAAK,MAEH2B,EAAQ,EAbd,SAciB,IAAI1C,QAAJ,uCAAY,WAAO2C,EAASC,GAAhB,SAAA7N,EAAA,sDACzB8N,YAAW,WACLnC,IAGJA,GAAO,EACPxK,QAAQC,IAAI,4BACZyM,EAAO,CAAExC,SAAS,OACjBA,GACH,IACEsC,EAAQ1K,EAAW8K,YACjBtF,GACA,SAAC8E,EAAQS,GACPrC,GAAO,EACP8B,EAAS,CACPzB,IAAKuB,EAAOvB,IACZlB,KAAMkD,EAAQlD,KACd4C,cAAe,GAEbH,EAAOvB,KACT7K,QAAQC,IAAI,yBAA0BmM,EAAOvB,KAC7C6B,EAAOJ,KAEPtM,QAAQC,IAAI,yBAA0BmM,GACtCK,EAAQH,MAGZtE,GAEF,MAAO8E,GACPtC,GAAO,EACPxK,QAAQ8K,MAAM,oBAAqBxD,EAAMwF,GA/BlB,UAiCjBtC,IAAQ6B,EAjCS,uBAmCvB,sBAAC,4BAAAxN,EAAA,+EAEmCiD,EAAWiL,qBAAqB,CAC9DzF,IAHL,OAES0F,EAFT,OAKGV,EAASU,GAAqBA,EAAkB/B,MAAM,GACjDT,IACE8B,EAEMA,EAAOzB,KAChB7K,QAAQC,IAAI,iBAAkBqH,EAAMgF,GACpC9B,GAAO,EACPkC,EAAOJ,EAAOzB,MACJyB,EAAOC,eAGjBvM,QAAQC,IAAI,wBAAyBqH,EAAMgF,GAC3C9B,GAAO,EACPiC,EAAQH,IAJRtM,QAAQC,IAAI,4BAA6BqH,EAAMgF,GAN/CtM,QAAQC,IAAI,uBAAwBqH,EAAMgF,IARjD,gDAsBQ9B,GACHxK,QAAQC,IAAI,8BAA+BqH,EAA3C,MAvBL,wDAAD,GAnCuB,SA8DjBmD,EAAM,KA9DW,iEAAZ,yDAdjB,cAcE6B,EAdF,OAiFMxK,EAAWmL,wBAAwBT,IACrC1K,EAAWoL,wBAAwBV,GACrChC,GAAO,EACPxK,QAAQC,IAAI,mBAAoBqM,GApFlC,kBAqFSA,GArFT,4C,wBAuFO,SAAS7B,EAAM0C,GACpB,OAAO,IAAIrD,SAAQ,SAAA2C,GAAO,OAAIE,WAAWF,EAASU,Q,sECndrCC,IAzCQ,SAAC,GAAkB,IAAhB3F,EAAe,EAAfA,SAEtB,EAAsClJ,mBAAS,IAA/C,mBAAO8O,EAAP,KAAoBC,EAApB,KA6BA,OA3BAjO,qBAAU,WACNW,QAAQC,IAAI,uBAEZ,IAAMsN,EAAWC,aAAY,WACzB,IAAMhG,GAAc,IAAI7G,MAAOC,UACzB6M,EAAWhG,EAAWD,EAEtBkG,EAAOC,KAAKC,MAAMH,EAAQ,OAC1BI,EAAQF,KAAKC,MAAOH,EAAQ,MAAT,MAElBK,EAAUH,KAAKC,MAAOH,EAAQ,KAAT,KACtBM,EAAUJ,KAAKC,MAAOH,EAAQ,IAAkB,KACtDH,EAAe,GAAD,OAAII,EAAJ,aAAaG,EAAb,aAAuBC,EAAvB,aAAmCC,EAAnC,MAEVN,EAAW,IACXzN,QAAQC,IAAI,qBACZ+N,cAAcT,MAEnB,KAEH,OAAO,WACCA,GACAS,cAAcT,MAGvB,IAGC,sBAAKhG,UAAU,kBAAf,UACI,mBAAGA,UAAU,eAAb,oCAGE8F,GAAe,oBAAG9F,UAAU,cAAb,qBAA+B8F,EAA/B,Y,+RCvCd,G,OAAA,IAA0B,0C,iBCMnCY,EAAiB,gBACjBC,EAAY,8BAA0BD,GAwF7BE,EAtFH,WAEV,MAA0C5P,mBAAS,MAAnD,mBAAOD,EAAP,KAAsB8P,EAAtB,KAEMC,EAAwB,uCAAG,gCAAAxP,EAAA,2DAEZoD,OAAXC,EAFuB,EAEvBA,OAFuB,UAKzBA,EALyB,wBAMvBA,EAAOoM,WACTtO,QAAQC,IAAI,yBAPa,SASJiC,EAAOqM,QAAQ,CAAEC,eAAe,IAT5B,OASrBjL,EATqB,OAU3BvD,QAAQC,IACN,6BACAsD,EAASI,UAAUoI,YAErBqC,EAAiB7K,EAASI,UAAUoI,YAdT,wBAgB3B0C,MAAM,8DAhBqB,0DAmB7BzO,QAAQ8K,MAAR,MAnB6B,0DAAH,qDAuBxB4D,EAAa,uCAAG,gCAAA7P,EAAA,2DACDoD,SAAXC,EADY,EACZA,QADY,gCAIKA,EAAOqM,UAJZ,OAIZhL,EAJY,OAKhBvD,QAAQC,IACN,6BACAsD,EAASI,UAAUoI,YAErBqC,EAAiB7K,EAASI,UAAUoI,YATpB,2CAAH,qDAmCnB,OARA1M,qBAAU,WACR,IAAMsP,EAAM,uCAAG,sBAAA9P,EAAA,sEACPwP,IADO,2CAAH,qDAIZ,OADApM,OAAO2M,iBAAiB,OAAQD,GACzB,kBAAM1M,OAAO4M,oBAAoB,OAAQF,MAC/C,IAGD,qBAAKpH,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,oDACA,mBAAGA,UAAU,WAAb,qGAEEjJ,GA1BR,wBACEiJ,UAAU,mCACVI,QAAS+G,EAFX,kCA4BKpQ,GAAiB,cAACD,EAAA,EAAD,CAAcC,cAAe2D,OAAOC,SACtD,sBAAKqF,UAAU,mBAAf,UACE,qBAAKuH,IAAI,eAAevH,UAAU,eAAewH,IAAKC,IACtD,mBACEzH,UAAU,cACV0H,KAAMf,EACNgB,OAAO,SACPC,IAAI,aAJN,6BAKelB,cCnFzBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,sUCEpBpQ,G,KAAsB,IAAIjB,IAAKY,UACnC,gDAGIsD,EAA4B,IAAIlE,IAAKY,UACzC,+CAGIqE,EAA0C,IAAIjF,IAAKY,UACvD,gDAGImG,EAAQ,IAAIuK,IAAY1Q,UAC5B,+CAkCI2E,GAvBiB,IAAIgM,KAAKC,aAAa,QAAS,CACpDC,MAAO,UACPC,sBAAuB,EACvBC,sBAAuB,IAoBN,uCAAG,WAAO1N,EAAM2N,GAAb,SAAAlR,EAAA,sEACP4Q,IAAY1Q,UAAUC,mBACjC,CAAC+Q,EAAM5Q,WAAY8D,IAAiB9D,WAAYiD,EAAKjD,YACrDiE,GAHkB,mFAAH,yDAOb+B,EAAgB,uCAAG,WAAOJ,GAAP,SAAAlG,EAAA,sEACV4Q,IAAY1Q,UAAUC,mBACjC,CAAC+F,EAAkB5F,WAAYF,EAAOC,KAAK,WAC3CgG,GAHqB,mFAAH,sDAOhBJ,EAAe,uCAAG,WAAOrD,EAAQsD,GAAf,SAAAlG,EAAA,sEACT4Q,IAAY1Q,UAAUC,mBACjC,CACEyC,EAAOtC,WACPF,EAAOC,KAAK,WACZD,EAAOC,KAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAClC6F,EAAkB5F,YAEpB+F,GARoB,mFAAH,0D","file":"static/js/main.e941d80f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { sendTransactions } from './connection';\nimport CountdownTimer from '../CountdownTimer';\nimport './CandyMachine.css';\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  CIVIC\n} from './helpers';\n\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\nconst CandyMachine = ({ walletAddress }) => {\n\n  const [candyMachine, setCandyMachine] = useState(null);\n  const [isMinting, setIsMinting] = useState(false);\n  \n\n  const getCandyMachineCreator = async (candyMachine) => {\n    const candyMachineID = new PublicKey(candyMachine);\n    return await web3.PublicKey.findProgramAddress(\n        [Buffer.from('candy_machine'), candyMachineID.toBuffer()],\n        candyMachineProgram,\n    );\n  };\n\n  useEffect(() => {\n    getCandyMachineState()\n  }, []);\n\n  // the provider is how the webapp can talk to the solana blockchain\n  // it gives our client a solana connection and our wallet credentials\n  // so we can talk to programs in solana\n\n  const getCandyMachineState = async () => {\n    const provider = getProvider();\n    // Get metadata about your deployed candy machine program\n    const idl = await Program.fetchIdl(candyMachineProgram, provider)\n    // Create a program that you can call\n    const program = new Program(idl, candyMachineProgram, provider);\n    // Fetch metadata from your candy machine\n    const candyMachine = await program.account.candyMachine.fetch(\n      process.env.REACT_APP_CANDY_MACHINE_ID\n    );\n    \n    console.log(\"Got Candy Machine state back, printing the data: \")\n    console.log(candyMachine.data)\n\n    // Parse out all our metadata and log it\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n\n    const presale =\n    candyMachine.data.whitelistMintSettings &&\n    candyMachine.data.whitelistMintSettings.presale &&\n    (!candyMachine.data.goLiveDate ||\n      candyMachine.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n\n    // We will be using this later in our UI so let's generate this now\n    const goLiveDateTimeString = `${new Date(goLiveData * 1000).toGMTString()}`\n\n    setCandyMachine({\n      id: process.env.REACT_APP_CANDY_MACHINE_ID,\n      program,\n      state: {\n        itemsAvailable,\n        itemsRedeemed,\n        itemsRemaining,\n        goLiveData,\n        goLiveDateTimeString,\n        isSoldOut: itemsRemaining === 0,\n        isActive:\n          (presale ||\n            candyMachine.data.goLiveDate.toNumber() < new Date().getTime() / 1000) &&\n          (candyMachine.endSettings\n            ? candyMachine.endSettings.endSettingType.date\n              ? candyMachine.endSettings.number.toNumber() > new Date().getTime() / 1000\n              : itemsRedeemed < candyMachine.endSettings.number.toNumber()\n            : true),\n        isPresale: presale,\n        goLiveDate: candyMachine.data.goLiveDate,\n        treasury: candyMachine.wallet,\n        tokenMint: candyMachine.tokenMint,\n        gatekeeper: candyMachine.data.gatekeeper,\n        endSettings: candyMachine.data.endSettings,\n        whitelistMintSettings: candyMachine.data.whitelistMintSettings,\n        hiddenSettings: candyMachine.data.hiddenSettings,\n        price: candyMachine.data.price,\n      },\n    });\n\n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n      presale,\n    });\n\n  };\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    // create a new connection object\n    const connection = new Connection(rpcHost);\n    // create a new solana Provider object\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  }\n\n  const getMetadata = async (mint) => {\n      const res = await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      );\n      console.log(res)\n      return res[0]\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from('edition'),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n  const mintTokenWrapper = async() => {\n    try {\n      setIsMinting(true);\n      const response = await mintToken();\n      setIsMinting(false);\n      return response\n    } catch(error) {\n      console.log(\"Encountered error while minting token\")\n      console.log(error)\n      setIsMinting(false);\n    }\n    return []\n  }\n\n  const renderDropTimer = () => {\n    const currentDate = new Date();\n    const dropDate = new Date(candyMachine.state.goLiveData * 1000);\n    console.log(\"currentDate= \" + currentDate);\n    console.log(\"dropDate= \" + dropDate);\n    console.log((dropDate < currentDate));\n    if (currentDate < dropDate) {\n        console.log('Before drop date!');\n        return <CountdownTimer dropDate={dropDate} />;\n    }\n    return <p>{`Drop Date: ${candyMachine.state.goLiveDateTimeString}`}</p>;\n}\n\n  const mintToken = async () => {\n    const mint = web3.Keypair.generate();\n\n    const userTokenAccountAddress = (\n      await getAtaForMint(mint.publicKey, walletAddress.publicKey)\n    )[0];\n  \n    const userPayingAccountAddress = candyMachine.state.tokenMint\n      ? (await getAtaForMint(candyMachine.state.tokenMint, walletAddress.publicKey))[0]\n      : walletAddress.publicKey;\n  \n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const signers = [mint];\n    const cleanupInstructions = [];\n    const instructions = [\n      web3.SystemProgram.createAccount({\n        fromPubkey: walletAddress.publicKey,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports:\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n            MintLayout.span,\n          ),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        walletAddress.publicKey,\n        walletAddress.publicKey,\n      ),\n      createAssociatedTokenAccountInstruction(\n        userTokenAccountAddress,\n        walletAddress.publicKey,\n        walletAddress.publicKey,\n        mint.publicKey,\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        userTokenAccountAddress,\n        walletAddress.publicKey,\n        [],\n        1,\n      ),\n    ];\n  \n    if (candyMachine.state.gatekeeper) {\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkToken(\n            walletAddress.publicKey,\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: true,\n        isSigner: false,\n      });\n      if (candyMachine.state.gatekeeper.expireOnUse) {\n        remainingAccounts.push({\n          pubkey: CIVIC,\n          isWritable: false,\n          isSigner: false,\n        });\n        remainingAccounts.push({\n          pubkey: (\n            await getNetworkExpire(\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            )\n          )[0],\n          isWritable: false,\n          isSigner: false,\n        });\n      }\n    }\n    if (candyMachine.state.whitelistMintSettings) {\n      const mint = new web3.PublicKey(\n        candyMachine.state.whitelistMintSettings.mint,\n      );\n  \n      const whitelistToken = (await getAtaForMint(mint, walletAddress.publicKey))[0];\n      remainingAccounts.push({\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false,\n      });\n  \n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n        const whitelistBurnAuthority = web3.Keypair.generate();\n  \n        remainingAccounts.push({\n          pubkey: mint,\n          isWritable: true,\n          isSigner: false,\n        });\n        remainingAccounts.push({\n          pubkey: whitelistBurnAuthority.publicKey,\n          isWritable: false,\n          isSigner: true,\n        });\n        signers.push(whitelistBurnAuthority);\n        const exists =\n          await candyMachine.program.provider.connection.getAccountInfo(\n            whitelistToken,\n          );\n        if (exists) {\n          instructions.push(\n            Token.createApproveInstruction(\n              TOKEN_PROGRAM_ID,\n              whitelistToken,\n              whitelistBurnAuthority.publicKey,\n              walletAddress.publicKey,\n              [],\n              1,\n            ),\n          );\n          cleanupInstructions.push(\n            Token.createRevokeInstruction(\n              TOKEN_PROGRAM_ID,\n              whitelistToken,\n              walletAddress.publicKey,\n              [],\n            ),\n          );\n        }\n      }\n    }\n  \n    if (candyMachine.state.tokenMint) {\n      const transferAuthority = web3.Keypair.generate();\n  \n      signers.push(transferAuthority);\n      remainingAccounts.push({\n        pubkey: userPayingAccountAddress,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: transferAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n  \n      instructions.push(\n        Token.createApproveInstruction(\n          TOKEN_PROGRAM_ID,\n          userPayingAccountAddress,\n          transferAuthority.publicKey,\n          walletAddress.publicKey,\n          [],\n          candyMachine.state.price.toNumber(),\n        ),\n      );\n      cleanupInstructions.push(\n        Token.createRevokeInstruction(\n          TOKEN_PROGRAM_ID,\n          userPayingAccountAddress,\n          walletAddress.publicKey,\n          [],\n        ),\n      );\n    }\n    const metadataAddress = await getMetadata(mint.publicKey);\n    console.log(\"metadataAddress: \" + metadataAddress);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n  \n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n      candyMachineAddress,\n    );\n  \n    instructions.push(\n      await candyMachine.program.instruction.mintNft(creatorBump, {\n        accounts: {\n          candyMachine: candyMachineAddress,\n          candyMachineCreator,\n          payer: walletAddress.publicKey,\n          wallet: candyMachine.state.treasury,\n          mint: mint.publicKey,\n          metadata: metadataAddress,\n          masterEdition,\n          mintAuthority: walletAddress.publicKey,\n          updateAuthority: walletAddress.publicKey,\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          clock: web3.SYSVAR_CLOCK_PUBKEY,\n          recentBlockhashes: web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          instructionSysvarAccount: web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n        },\n        remainingAccounts:\n          remainingAccounts.length > 0 ? remainingAccounts : undefined,\n      }),\n    );\n  \n    try {\n      return (\n        await sendTransactions(\n          candyMachine.program.provider.connection,\n          candyMachine.program.provider.wallet,\n          [instructions, cleanupInstructions],\n          [signers, []],\n        )\n      ).txs.map(t => t.txid);\n    } catch (e) {\n      console.log(e);\n    }\n    return [];\n  };\n\n  return (\n    candyMachine && (\n    <div className=\"machine-container\">\n      {renderDropTimer()}\n      <p>Items Minted: {`Items Minted: ${candyMachine.state.itemsRedeemed} / ${candyMachine.state.itemsAvailable}`}</p>\n      {candyMachine.state.itemsRedeemed === candyMachine.state.itemsAvailable ? (<p className=\"sub-text\">Sold Out 🙊</p>): (<button className=\"cta-button mint-button\" onClick={mintTokenWrapper} disabled={isMinting}>\n        {!isMinting && \"Mint 💎\"}\n        {isMinting && \"Minting... 🤩\"}\n      </button>)}\n    </div>)\n  );\n};\n\nexport default CandyMachine;\n","import { Transaction } from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\nexport const getErrorForTransaction = async (\n  connection,\n  txid\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\n\nexport async function sendTransactionsWithManualRetry(\n  connection,\n  wallet,\n  instructions,\n  signers,\n){\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          'StopOnFailure',\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection,\n  wallet,\n  instructionSet,\n  signersSet,\n  sequenceType = 'Parallel',\n  commitment = 'singleGossip',\n  successCallback = (txid, ind) => {},\n  failCallback = (txid, ind) => false,\n  block,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns= [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        failCallback(signedTxns[i], i);\n        if (sequenceType === 'StopOnFailure') {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== 'Parallel') {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== 'Parallel') {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection,\n  wallet,\n  instructions,\n  signers,\n  awaitConfirmation = true,\n  commitment = 'singleGossip',\n  includesFeePayer = false,\n  block,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection,\n  wallet,\n  instructions,\n  signers,\n  commitment = 'singleGossip',\n  includesFeePayer = false,\n  block,\n  beforeSend,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}) {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection,\n  transaction,\n  commitment,\n) {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid,\n  timeout,\n  connection,\n  commitment = 'recent',\n  queryStatus = false,\n){\n  let done = false;\n  let status = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import React, {useState, useEffect } from 'react';\nimport './CountdownTimer.css';\n\nconst CountdownTimer = ({ dropDate }) => {\n\n    const [timerString, setTimerString] = useState('');\n    \n    useEffect(() => {\n        console.log('Setting interval...');\n\n        const interval = setInterval(() => {\n            const currentDate = new Date().getTime();\n            const distance = dropDate - currentDate;\n\n            const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n            const  minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n            setTimerString(`${days}d ${hours}h ${minutes}m ${seconds}s`);\n\n            if (distance < 0) {\n                console.log('Clearing interval');\n                clearInterval(interval);\n            }\n        }, 1000);\n\n        return () => {\n            if (interval) {\n                clearInterval(interval);\n            }\n        };\n    }, []);\n\n    return (\n        <div className='timer-container'>\n            <p className='timer-header'>\n                Candy drop starting in\n            </p> \n            { timerString && <p className='timer-value'> ⏰ {timerString} </p>}\n        </div>\n    )\n};\n\nexport default CountdownTimer;\n","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport CandyMachine from './CandyMachine';\n\n// Constants\nconst TWITTER_HANDLE = '@cepstrumlabs';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  const checkIfWalletIsConnected = async () => {\n\n    const { solana } = window;\n    try {\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n        }\n        const response = await solana.connect({ onlyIfTrusted: true });\n        console.log(\n          'Connected with Public Key:',\n          response.publicKey.toString()\n        );\n        setWalletAddress(response.publicKey.toString());\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) { \n      const response = await solana.connect();\n        console.log(\n          'Connected with Public Key:',\n          response.publicKey.toString()\n        );\n        setWalletAddress(response.publicKey.toString());\n    }\n\n  };\n\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">🤔 DopeThinkerz 🤔</p>\n          <p className=\"sub-text\">7 DopeThinkerz have ascended into Solana's devnet and ready to generate💡...</p>\n          {/* Render your connect to wallet button right here */}\n          {!walletAddress && renderNotConnectedContainer()}\n        </div>\n        {walletAddress && <CandyMachine walletAddress={window.solana}></CandyMachine>}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { web3 } from '@project-serum/anchor';\nimport * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\n\nconst CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nconst toDate = (value) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nconst formatNumber = {\n  format: (val) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nconst getAtaForMint = async (mint, buyer)=> {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nconst getNetworkExpire = async (gatekeeperNetwork) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nconst getNetworkToken = async (wallet, gatekeeperNetwork) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nfunction createAssociatedTokenAccountInstruction(\n  associatedTokenAddress,\n  payer,\n  walletAddress,\n  splTokenMintAddress,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  CIVIC,\n  toDate,\n  formatNumber,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  createAssociatedTokenAccountInstruction,\n};\n"],"sourceRoot":""}